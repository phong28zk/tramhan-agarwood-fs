"use client"

import { useEffect, useState } from "react"
import { useSearchParams, useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { CheckCircle2, XCircle, Loader2, AlertCircle } from "lucide-react"

export default function VNPayResultPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [status, setStatus] = useState<"loading" | "success" | "error">("loading")
  const [message, setMessage] = useState("")
  const [orderInfo, setOrderInfo] = useState<{
    orderId: string
    amount: string
    transactionNo: string
    bankCode: string
  } | null>(null)

  useEffect(() => {
    const responseCode = searchParams.get("vnp_ResponseCode")
    const orderId = searchParams.get("vnp_TxnRef")
    const amount = searchParams.get("vnp_Amount")
    const transactionNo = searchParams.get("vnp_TransactionNo")
    const bankCode = searchParams.get("vnp_BankCode")

    console.log('üìä VNPay Result Page:', {
      responseCode,
      orderId,
      amount,
      transactionNo,
      bankCode,
    })

    if (responseCode === "00") {
      setStatus("success")
      setMessage("Giao d·ªãch th√†nh c√¥ng!")
      setOrderInfo({
        orderId: orderId || "",
        amount: amount ? (parseInt(amount) / 100).toLocaleString("vi-VN") : "0",
        transactionNo: transactionNo || "",
        bankCode: bankCode || "",
      })
    } else {
      setStatus("error")
      setMessage(getErrorMessage(responseCode || "99"))
    }
  }, [searchParams])

  const getErrorMessage = (code: string): string => {
    const messages: Record<string, string> = {
      "07": "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).",
      "09": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.",
      "10": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn",
      "11": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.",
      "12": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.",
      "13": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP).",
      "24": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch",
      "51": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.",
      "65": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.",
      "75": "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.",
      "79": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh.",
      "97": "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá",
      "99": "C√°c l·ªói kh√°c",
    }
    return messages[code] || "L·ªói kh√¥ng x√°c ƒë·ªãnh"
  }

  return (
    <div className="container max-w-2xl mx-auto px-4 py-12">
      <Card>
        <CardContent className="p-8">
          {status === "loading" && (
            <div className="text-center space-y-4">
              <Loader2 className="h-16 w-16 animate-spin text-amber-600 mx-auto" />
              <h2 className="text-2xl font-semibold">ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ giao d·ªãch...</h2>
            </div>
          )}

          {status === "success" && (
            <div className="text-center space-y-6">
              <CheckCircle2 className="h-16 w-16 text-green-600 mx-auto" />
              <div>
                <h2 className="text-2xl font-semibold text-green-600 mb-2">{message}</h2>
                <p className="text-gray-600">C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n qua VNPay!</p>
              </div>

              {orderInfo && (
                <div className="bg-green-50 p-6 rounded-lg text-left border border-green-200">
                  <h3 className="font-semibold text-lg mb-4 text-green-900">Th√¥ng tin giao d·ªãch</h3>
                  <div className="grid grid-cols-2 gap-3 text-sm">
                    <div className="text-gray-600">M√£ ƒë∆°n h√†ng:</div>
                    <div className="font-medium text-gray-900">{orderInfo.orderId}</div>

                    <div className="text-gray-600">S·ªë ti·ªÅn:</div>
                    <div className="font-medium text-green-600">{orderInfo.amount} VND</div>

                    {orderInfo.transactionNo && (
                      <>
                        <div className="text-gray-600">M√£ giao d·ªãch:</div>
                        <div className="font-medium text-gray-900">{orderInfo.transactionNo}</div>
                      </>
                    )}

                    {orderInfo.bankCode && (
                      <>
                        <div className="text-gray-600">Ng√¢n h√†ng:</div>
                        <div className="font-medium text-gray-900">{orderInfo.bankCode}</div>
                      </>
                    )}
                  </div>
                </div>
              )}

              <div className="flex gap-4">
                <Button onClick={() => router.push("/orders")} className="flex-1 bg-green-600 hover:bg-green-700">
                  Xem ƒë∆°n h√†ng
                </Button>
                <Button onClick={() => router.push("/")} variant="outline" className="flex-1">
                  V·ªÅ trang ch·ªß
                </Button>
              </div>
            </div>
          )}

          {status === "error" && (
            <div className="text-center space-y-6">
              <XCircle className="h-16 w-16 text-red-600 mx-auto" />
              <div>
                <h2 className="text-2xl font-semibold text-red-600 mb-2">Giao d·ªãch kh√¥ng th√†nh c√¥ng</h2>
                <div className="bg-red-50 p-4 rounded-lg border border-red-200 mt-4">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
                    <p className="text-sm text-red-800 text-left">{message}</p>
                  </div>
                </div>
              </div>

              <div className="flex gap-4">
                <Button onClick={() => router.push("/checkout")} className="flex-1 bg-red-600 hover:bg-red-700">
                  Th·ª≠ l·∫°i
                </Button>
                <Button onClick={() => router.push("/")} variant="outline" className="flex-1">
                  V·ªÅ trang ch·ªß
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
